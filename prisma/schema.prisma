generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./passenger.bus"
}

model User {
  id String @id @default(uuid())

  password    String
  recoveryKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id String @id @default(uuid())

  passphrase String
  simHash    String

  platform String
  // Email, Phone, Username, etc.
  identity String
  url      String
  note     String?
  icon     String?

  copiedCount  Int       @default(0)
  lastCopiedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tags        Tag[]               @relation("AccountToTag")
  collections Collection[]
  history     PassphraseHistory[] @relation("PassphraseHistory")
  analyses    Analysis[]          @relation("AnalysisToAccount")

  @@unique([url, platform, passphrase])
  @@index([platform])
  @@index([simHash])
}

model PassphraseHistory {
  id String @id @default(uuid())

  strength Int

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  accountId String?
  account   Account? @relation("PassphraseHistory", fields: [accountId], references: [id], onDelete: SetNull)
}

model Collection {
  id String @id @default(uuid())

  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]

  @@index([name])
}

model Tag {
  id String @id @default(uuid())

  name  String @unique
  icon  Int
  color String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[] @relation("AccountToTag")

  @@index([name])
}

model StrengthCache {
  id    String @id @default(uuid())
  date  String // YYYY-MM-DD String
  sum   Float
  count Int

  @@unique([date])
  @@index([date])
}

model Configuration {
  id String @id @default(uuid())

  key   String @unique
  value String
}

model Preference {
  id String @id @default(uuid())

  key   String @unique
  value String
}

model Wordlist {
  id String @id @default(uuid())

  displayName    String
  slug           String @unique
  minLength      Int
  maxLength      Int
  totalPasswords Int
  totalFiles     Int
  year           Int
  size           Int
  sizeUnits      String
  description    String
  repository     String
  source         String
  publishedBy    String
  adaptedBy      String

  status  WordlistStatus @default(IMPORTED)
  message String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  analyses Analysis[] @relation("AnalysisToWordlist")
}

enum WordlistStatus {
  IMPORTED
  DOWNLOADING
  DOWNLOADED
  UNVALIDATED
  VALIDATING
  VALIDATED
  ANALYZING
  FAILED
}

model Analysis {
  id String @id @default(uuid())

  status  AnalysisStatus @default(IDLE)
  message String?

  totalMatched    Int
  totalChecked    Int
  tookMiliseconds Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts  Account[]  @relation("AnalysisToAccount")
  wordlists Wordlist[] @relation("AnalysisToWordlist")
}

enum AnalysisStatus {
  IDLE
  RUNNING
  COMPLETED
  FAILED
}
